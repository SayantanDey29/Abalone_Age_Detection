# -*- coding: utf-8 -*-
"""AbaloneAge.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17JSu95blyCBkUKTe79TYMdk2pqMX6M4Z
"""

import pandas as pd
import numpy as np
import seaborn as sns

data=pd.read_csv("/content/abalone.csv")

data.head()

data.info()

data.columns

data.describe()

data.drop(index=data[data.Height==0].index,axis=0,inplace=True)

data.describe()

data.isnull().sum()

data.Sex.value_counts()

data.Rings.value_counts().sort_index(ascending=False)

import matplotlib.pyplot as plt

sns.boxplot(x='Sex',y='Rings',data=data)
plt.show()

sns.countplot(x='Sex',data=data)
plt.show()

data.hist(figsize=(20,10))
plt.show()

data.columns

data.head()

cols=data.columns[1:8]
cols

for x in cols:
  sns.scatterplot(x=x,y=data['Rings'],data=data,hue='Sex')
  plt.show()

data.skew().sort_values(ascending=False)

def outlier(col):
  d=x[col]
  q1=d.quantile(0.25)
  q3=d.quantile(0.75)
  iqr=q3-q1
  lower=q1-1.5*iqr
  upper=q3+1.5*iqr
  print("Outlier:",col)
  print((d[(d<lower) | (d>upper)]),lower,upper,iqr)

def outlier_handler(col):
  d=x[col]
  q1=d.quantile(0.25)
  q3=d.quantile(0.75)
  iqr=q3-q1
  lower=q1-1.5*iqr
  upper=q3+1.5*iqr
  print("Outlier:",col)
  d=d.clip(lower,upper)

plt.figure(figsize=(8,6))
sns.heatmap(data.corr(),annot=True,fmt='.1f',cmap='RdBu')
plt.show()

from sklearn.preprocessing import LabelEncoder
encoder=LabelEncoder()
data['Sex']=encoder.fit_transform(data['Sex'])

x=data.drop(['Rings'],axis=1)
y=data.Rings

y.shape

x.head()

from sklearn.preprocessing import StandardScaler,MinMaxScaler,RobustScaler

continious=x.columns[1:]

continious

for c in continious:
  outlier_handler(c)

scaler=StandardScaler()
continious=x.columns[1:]
for c in continious:
  x[[c]]=scaler.fit_transform(x[[c]])

x.head()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)

print(x_train.shape,y_train.shape)
print(x_test.shape,y_test.shape)

from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor

model=KNeighborsRegressor(n_neighbors=5,weights='distance',algorithm='brute',p=2)
model.fit(x_train,y_train)
ans=model.predict(x_test)

ans

ans=pd.DataFrame(ans,columns=['predicted'])

ans.head()

ans.shape

y_test.shape

y_true=pd.DataFrame(y_test.values)

y_true["new"]=ans['predicted']
y_true.tail()

from sklearn.metrics import mean_squared_error
rme=mean_squared_error(y_test,ans,squared=False)
print(rme)

